# Test All Functionalities Script
# Tests all components of the stealth address payment system

Write-Host "üß™ Testing All Functionalities..." -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Change to backend directory
Set-Location furtim-backend

Write-Host "1Ô∏è‚É£ Testing Contract Configuration..." -ForegroundColor Green
node -e "
console.log('üìã Contract Configuration Test');
const { getContractConfig, getContractFunctions } = require('./src/config/contracts.ts');
const config = getContractConfig();
const functions = getContractFunctions();

console.log('‚úÖ Contract Address:', config.address);
console.log('‚úÖ Network:', config.network);
console.log('‚úÖ Status:', config.status);
console.log('‚úÖ RPC URL:', config.rpcUrl);

console.log('‚úÖ Initialize Function:', functions.initialize);
console.log('‚úÖ Register Function:', functions.registerStealthAddress);
console.log('‚úÖ Create Payment Function:', functions.createStealthPayment);
console.log('‚úÖ Claim Payment Function:', functions.claimStealthPayment);
"

Write-Host "2Ô∏è‚É£ Testing Backend Services..." -ForegroundColor Green
node -e "
console.log('üîß Backend Services Test');
try {
  const { StealthIndexerService } = require('./src/services/stealthIndexer.ts');
  const indexer = new StealthIndexerService();
  console.log('‚úÖ StealthIndexerService initialized');
} catch (error) {
  console.log('‚ö†Ô∏è StealthIndexerService:', error.message);
}

try {
  const { StealthClaimService } = require('./src/services/stealthClaimService.ts');
  const claimService = new StealthClaimService();
  console.log('‚úÖ StealthClaimService initialized');
} catch (error) {
  console.log('‚ö†Ô∏è StealthClaimService:', error.message);
}

try {
  const { metaKeysService } = require('./src/services/metaKeysService.ts');
  console.log('‚úÖ MetaKeysService initialized');
} catch (error) {
  console.log('‚ö†Ô∏è MetaKeysService:', error.message);
}

try {
  const { authService } = require('./src/services/authService.ts');
  console.log('‚úÖ AuthService initialized');
} catch (error) {
  console.log('‚ö†Ô∏è AuthService:', error.message);
}
"

Write-Host "3Ô∏è‚É£ Testing Database Configuration..." -ForegroundColor Green
node -e "
console.log('üóÑÔ∏è Database Configuration Test');
try {
  const { supabaseAdmin } = require('./src/config/supabase.ts');
  console.log('‚úÖ Supabase configuration loaded');
} catch (error) {
  console.log('‚ö†Ô∏è Database configuration:', error.message);
}
"

Write-Host "4Ô∏è‚É£ Testing API Routes..." -ForegroundColor Green
node -e "
console.log('üåê API Routes Test');
try {
  const authRoutes = require('./src/routes/auth.ts');
  console.log('‚úÖ Auth routes loaded');
} catch (error) {
  console.log('‚ö†Ô∏è Auth routes:', error.message);
}

try {
  const stealthRoutes = require('./src/routes/stealth.ts');
  console.log('‚úÖ Stealth routes loaded');
} catch (error) {
  console.log('‚ö†Ô∏è Stealth routes:', error.message);
}
"

Write-Host "5Ô∏è‚É£ Testing Contract Deployment..." -ForegroundColor Green
node -e "
console.log('üì¶ Contract Deployment Test');
const { getContractConfig } = require('./src/config/contracts.ts');
const config = getContractConfig();

if (config.status === 'deployed') {
  console.log('‚úÖ Contract is deployed on', config.network);
  console.log('‚úÖ Contract address:', config.address);
  console.log('‚úÖ Deployment transaction:', config.deploymentTx);
  console.log('‚úÖ Initialization transaction:', config.initTx);
} else {
  console.log('‚ö†Ô∏è Contract not deployed on', config.network);
}
"

Write-Host "6Ô∏è‚É£ Testing Move Contract..." -ForegroundColor Green
Set-Location move
aptos account list --account 0x2e04b9fdd49ae932c8b08f04540363233093fec62579139722eb4b6a9f33464c --url https://fullnode.testnet.aptoslabs.com/v1
Set-Location ..

Write-Host "‚úÖ All functionality tests completed!" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Cyan
Write-Host "üéâ STEALTH ADDRESS SYSTEM READY! üéâ" -ForegroundColor Yellow
